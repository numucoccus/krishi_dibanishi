import React, { useEffect, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";
import "../App.css";

export default function Community() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [newPost, setNewPost] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("рж╕ржХрж▓");
  const [loading, setLoading] = useState(false);
  const [expandedPosts, setExpandedPosts] = useState({});
  const [liveUsers, setLiveUsers] = useState(0);
  const [comments, setComments] = useState({});
  const [newComment, setNewComment] = useState("");
  const [activeCommentPost, setActiveCommentPost] = useState(null);
  const location = useLocation();
  const navigate = useNavigate();

  // Green themed categories
  const categories = [
    { name: "рж╕ржХрж▓", icon: "ЁЯМ┐", color: "linear-gradient(135deg, #4CAF50 0%, #45a049 100%)" },
    { name: "ржорзОрж╕рзНржп ржЪрж╛рж╖", icon: "ЁЯРЯ", color: "linear-gradient(135deg, #4CAF50 0%, #2196F3 100%)" },
    { name: "ржкрзНрж░рж╛ржгрж┐рж╕ржорзНржкржж", icon: "ЁЯРД", color: "linear-gradient(135deg, #4CAF50 0%, #FF9800 100%)" },
    { name: "ржлрж╕рж▓ ржЪрж╛рж╖", icon: "ЁЯМ╛", color: "linear-gradient(135deg, #4CAF50 0%, #FFC107 100%)" },
    { name: "ржкрзЛрж▓рзНржЯрзНрж░рж┐", icon: "ЁЯРФ", color: "linear-gradient(135deg, #4CAF50 0%, #E91E63 100%)" },
    { name: "ржЬрзИржм ржЪрж╛рж╖", icon: "ЁЯНГ", color: "linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%)" },
    { name: "ржкрзНрж░ржпрзБржХрзНрждрж┐", icon: "ЁЯТ╗", color: "linear-gradient(135deg, #4CAF50 0%, #2196F3 100%)" },
    { name: "ржмрж╛ржЬрж╛рж░", icon: "ЁЯТ░", color: "linear-gradient(135deg, #4CAF50 0%, #FF9800 100%)" },
    { name: "рж╕рж╛ржзрж╛рж░ржг", icon: "ЁЯТм", color: "linear-gradient(135deg, #4CAF50 0%, #9C27B0 100%)" }
  ];

  // Post segments
  const postSegments = {
    TIP: { name: "ржЯрж┐ржкрж╕", icon: "ЁЯТб", color: "#4CAF50" },
    QUESTION: { name: "ржкрзНрж░рж╢рзНржи", icon: "тЭУ", color: "#FF9800" },
    EXPERIENCE: { name: "ржЕржнрж┐ржЬрзНржЮрждрж╛", icon: "ЁЯУЪ", color: "#2196F3" },
    PROBLEM: { name: "рж╕ржорж╕рзНржпрж╛", icon: "тЪая╕П", color: "#F44336" },
    NEWS: { name: "ржЦржмрж░", icon: "ЁЯУв", color: "#9C27B0" },
    ACHIEVEMENT: { name: "рж╕рж╛ржлрж▓рзНржп", icon: "ЁЯПЖ", color: "#FFC107" }
  };

  useEffect(() => {
    const loggedInUser = JSON.parse(localStorage.getItem("user"));
    if (loggedInUser) {
      setUser(loggedInUser);
    } else {
      navigate('/login');
      return;
    }

    loadPosts();
    loadComments();
    
    const interval = setInterval(() => {
      loadNewPosts();
      updateLiveUsers();
      simulateLiveComments();
    }, 3000);

    return () => clearInterval(interval);
  }, [navigate]);

  const loadPosts = () => {
    setLoading(true);
    setTimeout(() => {
      const savedPosts = JSON.parse(localStorage.getItem('communityPosts')) || [];
      if (savedPosts.length === 0) {
        setPosts(generateSamplePosts());
      } else {
        setPosts(savedPosts);
      }
      setLoading(false);
    }, 500);
  };

  const loadComments = () => {
    const savedComments = JSON.parse(localStorage.getItem('postComments')) || {};
    setComments(savedComments);
  };

  const loadNewPosts = () => {
    const savedPosts = JSON.parse(localStorage.getItem('communityPosts')) || [];
    if (savedPosts.length !== posts.length) {
      setPosts(savedPosts);
    }
  };

  const updateLiveUsers = () => {
    const randomUsers = Math.floor(Math.random() * 50) + 20;
    setLiveUsers(randomUsers);
  };

  const simulateLiveComments = () => {
    if (Math.random() > 0.7 && posts.length > 0) {
      const randomPost = posts[Math.floor(Math.random() * posts.length)];
      const sampleComments = [
        "ржнрж╛рж▓рзЛ ржкрзЛрж╕рзНржЯ! ЁЯСН",
        "ржЖржорж┐ржУ ржПржХржЗ рж╕ржорж╕рзНржпрж╛ржпрж╝ ржкржбрж╝рзЗржЫрж┐",
        "ржзржирзНржпржмрж╛ржж рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп",
        "ржжрж╛рж░рзБржг рждржерзНржп ЁЯТЪ",
        "ржЖржорж╛рж░ржУ ржПржЗ ржЕржнрж┐ржЬрзНржЮрждрж╛ рж╣ржпрж╝рзЗржЫрзЗ",
        "ржХрзАржнрж╛ржмрзЗ ржЖрж░ржУ ржЬрж╛ржирждрзЗ ржкрж╛рж░рж┐?",
        "ржЕрж╕рж╛ржзрж╛рж░ржг рж╢рзЗржпрж╝рж╛рж░ ЁЯМ▒"
      ];
      
      const newComment = {
        id: Date.now(),
        userId: `user${Math.floor(Math.random() * 10)}`,
        userName: ["рж░рж╣рж┐ржо", "ржХрж░рж┐ржо", "ржлрж╛рждрзЗржорж╛", "рж╕рж╛рж▓ржорж╛", "ржЬрж╛рж╣рж┐ржж", "ржЖржпрж╝рзЗрж╢рж╛"][Math.floor(Math.random() * 6)],
        content: sampleComments[Math.floor(Math.random() * sampleComments.length)],
        timestamp: new Date().toISOString(),
        likes: 0
      };

      const updatedComments = {
        ...comments,
        [randomPost.id]: [...(comments[randomPost.id] || []), newComment]
      };
      
      setComments(updatedComments);
      localStorage.setItem('postComments', JSON.stringify(updatedComments));
    }
  };

  const truncateText = (text, maxLength = 120) => {
    if (text.length <= maxLength) return text;
    return text.substr(0, maxLength) + '...';
  };

  const toggleExpand = (postId) => {
    setExpandedPosts(prev => ({
      ...prev,
      [postId]: !prev[postId]
    }));
  };

  const toggleComments = (postId) => {
    setActiveCommentPost(activeCommentPost === postId ? null : postId);
    setNewComment("");
  };

  const handleAddComment = (postId) => {
    if (!newComment.trim()) return;

    const comment = {
      id: Date.now(),
      userId: user.id,
      userName: user.name,
      content: newComment,
      timestamp: new Date().toISOString(),
      likes: 0
    };

    const updatedComments = {
      ...comments,
      [postId]: [...(comments[postId] || []), comment]
    };

    setComments(updatedComments);
    setNewComment("");
    localStorage.setItem('postComments', JSON.stringify(updatedComments));

    // Update post comment count
    const updatedPosts = posts.map(post => {
      if (post.id === postId) {
        return { ...post, comments: (post.comments || 0) + 1 };
      }
      return post;
    });
    setPosts(updatedPosts);
    localStorage.setItem('communityPosts', JSON.stringify(updatedPosts));
  };

  const generateSamplePosts = () => {
    const samplePosts = [
      // Big Technology Posts
      {
        id: 1,
        userId: "tech1",
        userName: "ржб. ржЖрж╣ржорзЗржж рж╣рзЛрж╕рзЗржи",
        userRole: "ржХрзГрж╖рж┐ ржкрзНрж░ржпрзБржХрзНрждрж┐ржмрж┐ржж",
        userLocation: "ржврж╛ржХрж╛",
        userAvatar: "ЁЯСитАНЁЯТ╗",
        content: "ЁЯМ▒ **рж╕рзНржорж╛рж░рзНржЯ ржлрж╛рж░рзНржорж┐ржВ ржкрзНрж░ржпрзБржХрзНрждрж┐** ржирж┐ржпрж╝рзЗ ржмрж┐рж╢рзЗрж╖ ржкрзНрж░рждрж┐ржмрзЗржжржи: ржЖрж░рзНржЯрж┐ржлрж┐рж╢рж┐ржпрж╝рж╛рж▓ ржЗржирзНржЯрзЗрж▓рж┐ржЬрзЗржирзНрж╕ ржПржмржВ IoT ржПрж░ ржорж╛ржзрзНржпржорзЗ ржХрзГрж╖рж┐ ржмрж┐ржкрзНрж▓ржм! ржбрзНрж░рзЛржи ржЯрзЗржХржирзЛрж▓ржЬрж┐, рж╕рзЗржирзНрж╕рж░ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ, ржПржмржВ ржЕржЯрзЛржорзЗржЯрзЗржб ржЗрж░рж┐ржЧрзЗрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо ржХрзАржнрж╛ржмрзЗ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржХрзГрж╖рж┐ржХрзЗ ржбрж┐ржЬрж┐ржЯрж╛рж▓рж╛ржЗржЬржб ржХрж░ржЫрзЗ рждрж╛ ржирж┐ржпрж╝рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЖрж▓рзЛржЪржирж╛ред ржПржЗ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧрзБрж▓рж┐ ржлрж╕рж▓рзЗрж░ ржЙрзОржкрж╛ржжржи рзкрзж% ржкрж░рзНржпржирзНржд ржмрзГржжрзНржзрж┐ ржХрж░рждрзЗ рж╕ржХрзНрж╖ржоред ржмрж░рзНрждржорж╛ржирзЗ ржжрзЗрж╢рзЗрж░ рзлрзжржЯрж┐ ржЙржкржЬрзЗрж▓рж╛ржпрж╝ ржПржЗ ржкрзНрж░ржпрзБржХрзНрждрж┐ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ ржлрж▓рж╛ржлрж▓ ржЕрждрзНржпржирзНржд ржЖрж╢рж╛ржмрзНржпржЮрзНржЬржХред",
        image: null,
        category: "ржкрзНрж░ржпрзБржХрзНрждрж┐",
        segment: "ржЦржмрж░",
        likes: 156,
        comments: 42,
        shares: 28,
        views: 890,
        timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
        liked: false,
        isLive: true,
        isFeatured: true,
        isBigPost: true
      },
      {
        id: 2,
        userId: "tech2",
        userName: "рж╕рж╛ржпрж╝рзЗржжрж╛ ржЖржХрзНрждрж╛рж░",
        userRole: "ржПржЧрзНрж░рзЛ-ржЯрзЗржХ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ",
        userLocation: "ржЧрж╛ржЬрзАржкрзБрж░",
        userAvatar: "ЁЯСйтАНЁЯФм",
        content: "ЁЯУ▒ **ржХрзГрж╖рж┐ ржЕрзНржпрж╛ржк ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ**: ржХрзАржнрж╛ржмрзЗ ржорзЛржмрж╛ржЗрж▓ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржХрзГрж╖ржХржжрзЗрж░ ржЬрзАржмржи рж╕рж╣ржЬ ржХрж░ржЫрзЗ? ржмрж░рзНрждржорж╛ржирзЗ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗ рзлрзжржЯрж┐рж░ ржмрзЗрж╢рж┐ ржХрзГрж╖рж┐ ржЕрзНржпрж╛ржк рж╕ржХрзНрж░рж┐ржпрж╝ рж░ржпрж╝рзЗржЫрзЗ ржпрж╛ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕, ржмрж╛ржЬрж╛рж░ ржжрж░, рж░рзЛржЧржмрж╛рж▓рж╛ржЗ ржирж┐рж░рзНржгржпрж╝ ржПржмржВ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржкрж░рж╛ржорж░рзНрж╢ ржкрзНрж░ржжрж╛ржи ржХрж░ржЫрзЗред ржПржЗ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржЯрзНрж░рж╛ржирзНрж╕ржлрж░рзНржорзЗрж╢ржи ржХрзАржнрж╛ржмрзЗ ржЧрзНрж░рж╛ржорзАржг ржЕрж░рзНржержирзАрждрж┐ржХрзЗ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржХрж░ржЫрзЗ рждрж╛ ржирж┐ржпрж╝рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржгред ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ 'ржХрзГрж╖рж┐ ржмрж╛рждрж╛ржпрж╝ржи', 'e-ржХрзГрж╖рж┐' ржПржмржВ 'ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржХрзГрж╖рж┐' ржЕрзНржпрж╛ржкржЧрзБрж▓рзЛрж░ рж╕рж╛ржлрж▓рзНржп рж▓ржХрзНрж╖ржгрзАржпрж╝ред",
        image: null,
        category: "ржкрзНрж░ржпрзБржХрзНрждрж┐",
        segment: "ржЯрж┐ржкрж╕",
        likes: 98,
        comments: 31,
        shares: 15,
        views: 567,
        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
        liked: false,
        isLive: true,
        isFeatured: true,
        isBigPost: true
      },
      // Big Market Posts
      {
        id: 3,
        userId: "market1",
        userName: "ржорзЛржГ рж╕рзЗрж▓рж┐ржо ржЙржжрзНржжрж┐ржи",
        userRole: "ржмрж╛ржЬрж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ",
        userLocation: "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
        userAvatar: "ЁЯСитАНЁЯТ╝",
        content: "ЁЯУИ **рзирзжрзирзк рж╕рж╛рж▓рзЗрж░ ржХрзГрж╖рж┐ ржкржгрзНржп ржмрж╛ржЬрж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕**: ржзрж╛ржи, ржЖрж▓рзБ, ржкрзЗржБржпрж╝рж╛ржЬ ржПржмржВ ржорж╛ржЫрзЗрж░ ржмрж╛ржЬрж╛рж░ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ ржирж┐ржпрж╝рзЗ ржмрж┐рж╢рзЗрж╖ ржкрзНрж░рждрж┐ржмрзЗржжржиред ржмрзИрж╢рзНржмрж┐ржХ ржмрж╛ржЬрж╛рж░ ржЕржмрж╕рзНржерж╛, рж░ржкрзНрждрж╛ржирж┐ рж╕рзБржпрзЛржЧ, ржПржмржВ рж╕рзНржерж╛ржирзАржпрж╝ ржЪрж╛рж╣рж┐ржжрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгред ржХрзАржнрж╛ржмрзЗ ржХрзГрж╖ржХрж░рж╛ рждрж╛ржжрзЗрж░ ржЙрзОржкрж╛ржжржи ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржХрж░рзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорзБржирж╛ржлрж╛ ржЕрж░рзНржЬржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи рждрж╛рж░ рж░рзЛржбржорзНржпрж╛ржкред ржмрж░рзНрждржорж╛ржи ржмрж╛ржЬрж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржЕржирзБржпрж╛ржпрж╝рзА, ржЖрж╕ржирзНржи ржорзМрж╕рзБржорзЗ ржЖрж▓рзБ ржУ ржкрзЗржБржпрж╝рж╛ржЬрзЗрж░ ржжрж╛ржо рж╕рзНржерж┐рждрж┐рж╢рзАрж▓ ржерж╛ржХрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ рж░ржпрж╝рзЗржЫрзЗред",
        image: null,
        category: "ржмрж╛ржЬрж╛рж░",
        segment: "ржЦржмрж░",
        likes: 134,
        comments: 56,
        shares: 32,
        views: 1023,
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        liked: false,
        isLive: true,
        isFeatured: true,
        isBigPost: true
      },
      // Regular posts
      {
        id: 4,
        userId: "user1",
        userName: "ржорзЛржГ ржХрж░рж┐ржо ржЙржжрзНржжрж┐ржи",
        userRole: "ржорзОрж╕рзНржпржЪрж╛рж╖рзА",
        userLocation: "ржХржХрзНрж╕ржмрж╛ржЬрж╛рж░",
        userAvatar: "ЁЯСитАНЁЯМ╛",
        content: "ржЪрж┐ржВржбрж╝рж┐ ржЪрж╛рж╖рзЗ рж░рзЛржЧ ржкрзНрж░рждрж┐рж░рзЛржзрзЗрж░ ржХрж╛рж░рзНржпржХрж░ ржЙржкрж╛рзЯ рж╢рзЗрзЯрж╛рж░ ржХрж░ржЫрж┐ред ржЖржорж┐ ржирж┐ржорзНржирзЛржХрзНржд ржкржжрзНржзрждрж┐ ржЕржирзБрж╕рж░ржг ржХрж░рж┐: ржирж┐рзЯржорж┐ржд ржкрж╛ржирж┐ ржкрж░рзАржХрзНрж╖рж╛, рж╕ржарж┐ржХ ржЦрж╛ржжрзНржп ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛, ржПржмржВ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржкрзНрж░рждрж┐рж╖рзЗржзржХ ржмрзНржпржмрж╣рж╛рж░ред ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ ржмрж░рзНрж╖рж╛ржХрж╛рж▓рзЗ ржкрж╛ржирж┐рж░ ржЧрзБржгржЧржд ржорж╛ржи ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рж╛ ржЦрзБржмржЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред",
        image: null,
        category: "ржорзОрж╕рзНржп ржЪрж╛рж╖",
        segment: "ржЯрж┐ржкрж╕",
        likes: 67,
        comments: 28,
        shares: 5,
        views: 234,
        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        liked: false,
        isLive: true
      },
      {
        id: 5,
        userId: "user2",
        userName: "ржлрж╛рждрзЗржорж╛ ржЦрж╛рждрзБржи",
        userRole: "ржЦрж╛ржорж╛рж░рж┐",
        userLocation: "ржкрж╛ржмржирж╛",
        userAvatar: "ЁЯСйтАНЁЯМ╛",
        content: "ржЧрж╛ржнрзАрж░ ржжрзБржз ржЙрзОржкрж╛ржжржи ржмрзГржжрзНржзрж┐рж░ ржЬржирзНржп ржЖржорж╛рж░ ржЕржнрж┐ржЬрзНржЮрждрж╛: ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржжрзНржп, ржирж┐рзЯржорж┐ржд рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рзАржХрзНрж╖рж╛, ржПржмржВ рж╕ржарж┐ржХ ржмрж╛рж╕рж╕рзНржерж╛ржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ ржЦрзБржмржЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред ржЖржорж┐ ржжрзЗржЦрзЗржЫрж┐ ржпрзЗ ржЧрж╛ржнрзАрж░ ржЬржирзНржп рж╕рзБрж╖ржо ржЦрж╛ржжрзНржп ржПржмржВ ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзБржжрзНржз ржкрж╛ржирж┐ рж╕рж░ржмрж░рж╛рж╣ ржжрзБржзрзЗрж░ ржЙрзОржкрж╛ржжржи рж╢рждржХрж░рж╛ рзйрзж ржнрж╛ржЧ ржкрж░рзНржпржирзНржд ржмрзГржжрзНржзрж┐ ржХрж░рждрзЗ ржкрж╛рж░рзЗред",
        image: null,
        category: "ржкрзНрж░рж╛ржгрж┐рж╕ржорзНржкржж",
        segment: "ржЕржнрж┐ржЬрзНржЮрждрж╛",
        likes: 45,
        comments: 19,
        shares: 3,
        views: 189,
        timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),
        liked: false,
        isLive: true
      }
    ];
    localStorage.setItem('communityPosts', JSON.stringify(samplePosts));
    return samplePosts;
  };

  const handleCreatePost = () => {
    if (!newPost.trim()) return;

    const post = {
      id: Date.now(),
      userId: user.id,
      userName: user.name,
      userRole: roleLabels[user.role] || user.role,
      userLocation: user.location || "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢",
      userAvatar: "ЁЯСд",
      content: newPost,
      image: null,
      category: selectedCategory === "рж╕ржХрж▓" ? "рж╕рж╛ржзрж╛рж░ржг" : selectedCategory,
      segment: "рж╕рж╛ржзрж╛рж░ржг",
      likes: 0,
      comments: 0,
      shares: 0,
      views: 0,
      timestamp: new Date().toISOString(),
      liked: false,
      isLive: true,
      isFeatured: false,
      isBigPost: false
    };

    const updatedPosts = [post, ...posts];
    setPosts(updatedPosts);
    localStorage.setItem('communityPosts', JSON.stringify(updatedPosts));
    setNewPost("");
  };

  const handleLike = (postId) => {
    const updatedPosts = posts.map(post => {
      if (post.id === postId) {
        const alreadyLiked = post.liked;
        return {
          ...post,
          likes: alreadyLiked ? post.likes - 1 : post.likes + 1,
          liked: !alreadyLiked
        };
      }
      return post;
    });
    setPosts(updatedPosts);
    localStorage.setItem('communityPosts', JSON.stringify(updatedPosts));
  };

  const handleShare = (postId) => {
    const updatedPosts = posts.map(post => {
      if (post.id === postId) {
        return { ...post, shares: post.shares + 1 };
      }
      return post;
    });
    setPosts(updatedPosts);
    localStorage.setItem('communityPosts', JSON.stringify(updatedPosts));
  };

  const filteredPosts = selectedCategory === "рж╕ржХрж▓" 
    ? posts 
    : posts.filter(post => post.category === selectedCategory);

  const handleLogout = () => {
    localStorage.removeItem("user");
    navigate('/login');
  };

  const isCommunityActive = location.pathname === '/community';

  const roleLabels = {
    Farmer: "ржХрзГрж╖ржХ",
    Expert: "ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ",
    Coordinator: "рж╕рзНржерж╛ржирзАрзЯ рж╕ржоржирзНржмрзЯржХрж╛рж░рзА",
    Entrepreneur: "рж╕рзНржЯрж╛рж░рзНржЯржЖржк ржЙржжрзНржпрзЛржХрзНрждрж╛",
    Supplier: "рж╕рж░ржмрж░рж╛рж╣ржХрж╛рж░рзА",
    Investor: "ржмрж┐ржирж┐рзЯрзЛржЧржХрж╛рж░рзА",
  };

  const formatTime = (timestamp) => {
    const now = new Date();
    const postTime = new Date(timestamp);
    const diffInSeconds = Math.floor((now - postTime) / 1000);
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    const diffInHours = Math.floor(diffInMinutes / 60);
    const diffInDays = Math.floor(diffInHours / 24);

    if (diffInSeconds < 60) return "ржПржЗржорж╛рждрзНрж░";
    if (diffInMinutes < 60) return `${diffInMinutes} ржорж┐ржирж┐ржЯ ржЖржЧрзЗ`;
    if (diffInHours < 24) return `${diffInHours} ржШржгрзНржЯрж╛ ржЖржЧрзЗ`;
    if (diffInDays === 1) return "ржЧрждржХрж╛рж▓";
    return `${diffInDays} ржжрж┐ржи ржЖржЧрзЗ`;
  };

  const formatCommentTime = (timestamp) => {
    const now = new Date();
    const commentTime = new Date(timestamp);
    const diffInSeconds = Math.floor((now - commentTime) / 1000);
    if (diffInSeconds < 60) return "ржПржЗржорж╛рждрзНрж░";
    return `${Math.floor(diffInSeconds/60)} ржорж┐ржирж┐ржЯ ржЖржЧрзЗ`;
  };

  return (
    <>
      <style>
        {`
          .green-gradient-bg {
            background: linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%) !important;
          }
          
          .featured-post {
            border: 3px solid #4CAF50 !important;
            background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e8 100%);
          }
          
          .big-post {
            font-size: 1.1em;
            line-height: 1.8;
          }
          
          .live-comment {
            animation: slideInUp 0.3s ease-out;
            border-left: 3px solid #4CAF50;
            background: #f9f9f9;
          }
          
          @keyframes slideInUp {
            from { transform: translateY(10px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
          }
          
          .green-glow {
            box-shadow: 0 0 15px rgba(76, 175, 80, 0.4) !important;
          }
          
          .category-card {
            transition: all 0.3s ease;
            border: none;
            border-radius: 12px;
            cursor: pointer;
          }
          
          .category-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
          }
          
          .post-card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
          }
          
          .post-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(76, 175, 80, 0.15);
          }
          
          .avatar-green {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            color: white;
          }
          
          .btn-green {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            border: none;
            color: white;
            transition: all 0.3s ease;
          }
          
          .btn-green:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(76, 175, 80, 0.4);
          }
          
          .live-pulse {
            animation: pulse 1.5s infinite;
          }
          
          @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.8; }
            100% { transform: scale(1); opacity: 1; }
          }
          
          .comment-section {
            max-height: 300px;
            overflow-y: auto;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 10px;
          }
          
          .featured-badge {
            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
            color: white;
            font-weight: bold;
            border-radius: 20px;
            padding: 5px 15px;
            font-size: 0.8em;
          }
        `}
      </style>

      {/* Green Themed Navbar */}
      <nav className="navbar navbar-expand-lg navbar-dark green-gradient-bg shadow">
        <div className="container">
          <Link className="navbar-brand fw-bold d-flex align-items-center" to="/home">
            <span className="fs-3">ЁЯМ╛</span>
            <div className="ms-2">
              <div className="fw-bold">BD ржХрзГрж╖рж┐ ржжрж┐ржмрж╛ржирж┐рж╢рж┐</div>
              <small className="opacity-75">рж╕ржмрзБржЬрзЗрж░ ржЕржнрж┐ржпрж╛рждрзНрж░рж╛ржпрж╝</small>
            </div>
          </Link>

          <div className="d-flex align-items-center me-3 text-white">
            <span className="badge bg-warning live-pulse me-2">LIVE</span>
            <small>{liveUsers} ржЬржи ржЕржирж▓рж╛ржЗржирзЗ</small>
          </div>

          <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent">
            <span className="navbar-toggler-icon"></span>
          </button>

          <div className="collapse navbar-collapse" id="navbarContent">
            <ul className="navbar-nav mx-auto mb-2 mb-lg-0">
              {["рж╣рзЛржо", "ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб", "ржХржорж┐ржЙржирж┐ржЯрж┐", "рж░рж┐рж╕рзЛрж░рзНрж╕", "ржмрж╛ржЬрж╛рж░"].map((item) => (
                <li key={item} className="nav-item">
                  <Link className={`nav-link ${location.pathname.includes(item.toLowerCase()) ? 'active fw-bold' : ''}`} to={`/${item === 'рж╣рзЛржо' ? '' : item.toLowerCase()}`}>
                    {item}
                  </Link>
                </li>
              ))}
            </ul>

            <div className="d-flex">
              {user ? (
                <>
                  <Link to="/profile">
                    <button className="btn btn-outline-light btn-sm me-2">
                      {roleLabels[user.role] || user.name}
                    </button>
                  </Link>
                  <button className="btn btn-outline-light btn-sm" onClick={handleLogout}>
                    рж▓ржЧржЖржЙржЯ
                  </button>
                </>
              ) : (
                <Link to="/login">
                  <button className="btn btn-outline-light btn-sm">рж▓ржЧржЗржи</button>
                </Link>
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="container py-4">
        <div className="text-center mb-4">
          <div className="d-flex justify-content-center align-items-center mb-2">
            <span className="badge bg-success live-pulse me-2">рж▓рж╛ржЗржн</span>
            <h2 className="fw-bold text-success mb-0">ржХрзГрж╖рж┐ ржХржорж┐ржЙржирж┐ржЯрж┐</h2>
          </div>
          <p className="text-muted">рж╕ржмрзБржЬрзЗрж░ рж╕ржорж╛рж░рзЛрж╣рзЗ ржЬрзНржЮрж╛ржирзЗрж░ ржмрж┐ржирж┐ржоржпрж╝</p>
          <div className="d-flex justify-content-center gap-3">
            <small className="text-success">
              <i className="fas fa-circle me-1"></i> {posts.filter(p => p.isLive).length} рж╕ржХрзНрж░рж┐ржпрж╝ ржкрзЛрж╕рзНржЯ
            </small>
            <small className="text-primary">
              <i className="fas fa-comments me-1"></i> {Object.values(comments).flat().length} рж▓рж╛ржЗржн ржоржирзНрждржмрзНржп
            </small>
          </div>
        </div>

        <div className="row">
          <div className="col-lg-8">
            {/* Create Post */}
            {user && (
              <div className="card post-card mb-4">
                <div className="card-body">
                  <div className="d-flex align-items-center mb-3">
                    <div className="avatar-green me-3">
                      {user.avatar || "ЁЯСд"}
                    </div>
                    <div>
                      <h6 className="mb-0 fw-bold">{user.name}</h6>
                      <small className="text-muted">{roleLabels[user.role] || user.role}</small>
                    </div>
                  </div>
                  
                  <textarea
                    className="form-control mb-3"
                    rows="3"
                    placeholder="ржЖржкржирж╛рж░ ржЪрж┐ржирзНрждрж╛ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи..."
                    value={newPost}
                    onChange={(e) => setNewPost(e.target.value)}
                    style={{borderRadius: '10px'}}
                  />
                  
                  <div className="d-flex justify-content-between align-items-center">
                    <select 
                      className="form-select me-2"
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                      style={{width: 'auto', borderRadius: '10px'}}
                    >
                      {categories.map(cat => (
                        <option key={cat.name} value={cat.name}>{cat.icon} {cat.name}</option>
                      ))}
                    </select>
                    <button className="btn btn-green" onClick={handleCreatePost} disabled={!newPost.trim()}>
                      ржкрзЛрж╕рзНржЯ ржХрж░рзБржи
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Categories */}
            <div className="mb-4">
              <h6 className="fw-bold mb-3 text-success">ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:</h6>
              <div className="row g-2">
                {categories.map(category => (
                  <div key={category.name} className="col-4 col-md-3 col-lg-2">
                    <div 
                      className={`category-card text-center p-2 ${selectedCategory === category.name ? 'green-glow' : ''}`}
                      onClick={() => setSelectedCategory(category.name)}
                      style={{background: category.color, color: 'white'}}
                    >
                      <div className="fs-5">{category.icon}</div>
                      <small>{category.name}</small>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Posts Feed */}
            <div>
              {filteredPosts.map(post => {
                const isExpanded = expandedPosts[post.id];
                const showSeeMore = post.content.length > 120;
                const segment = postSegments[Object.keys(postSegments).find(key => postSegments[key].name === post.segment)] || {};
                const postComments = comments[post.id] || [];
                
                return (
                  <div key={post.id} className={`card post-card mb-4 ${post.isFeatured ? 'featured-post' : ''}`}>
                    <div className="card-body">
                      {/* Post Header */}
                      <div className="d-flex justify-content-between align-items-start mb-3">
                        <div className="d-flex align-items-center">
                          <div className="avatar-green me-3">
                            {post.userAvatar}
                          </div>
                          <div>
                            <div className="d-flex align-items-center">
                              <h6 className="mb-0 fw-bold">{post.userName}</h6>
                              {post.isLive && (
                                <span className="badge bg-danger ms-2 live-pulse">рж▓рж╛ржЗржн</span>
                              )}
                            </div>
                            <small className="text-muted">
                              {post.userRole} тАв {post.userLocation} тАв {formatTime(post.timestamp)}
                            </small>
                            <div className="mt-1">
                              <span className="badge me-1" style={{backgroundColor: segment.color, color: 'white'}}>
                                {segment.icon} {post.segment}
                              </span>
                              <span className="badge bg-success">{post.category}</span>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Post Content */}
                      <div className={`post-content ${post.isBigPost ? 'big-post' : ''}`}>
                        <p className="card-text">
                          {isExpanded ? post.content : truncateText(post.content, post.isBigPost ? 200 : 120)}
                        </p>
                        {showSeeMore && (
                          <button 
                            className="btn btn-link p-0 text-success text-decoration-none"
                            onClick={() => toggleExpand(post.id)}
                          >
                            {isExpanded ? 'тЦ▓ ржХржо ржжрзЗржЦрж╛ржи' : 'тЦ╝ ржЖрж░ржУ ржжрзЗржЦрзБржи'}
                          </button>
                        )}
                      </div>

                      {/* Post Stats */}
                      <div className="d-flex justify-content-between text-muted small my-3">
                        <span>ЁЯСН {post.likes} рж▓рж╛ржЗржХ</span>
                        <span>ЁЯТм {postComments.length} ржоржирзНрждржмрзНржп</span>
                        <span>ЁЯФД {post.shares} рж╢рзЗржпрж╝рж╛рж░</span>
                      </div>

                      {/* Action Buttons */}
                      <div className="d-flex gap-2 border-top pt-3">
                        <button 
                          className={`btn btn-sm flex-fill ${post.liked ? 'btn-danger' : 'btn-outline-danger'}`}
                          onClick={() => handleLike(post.id)}
                        >
                          {post.liked ? 'тЭдя╕П рж▓рж╛ржЗржХржб' : 'ЁЯдН рж▓рж╛ржЗржХ'}
                        </button>
                        <button 
                          className="btn btn-sm btn-outline-success flex-fill"
                          onClick={() => toggleComments(post.id)}
                        >
                          ЁЯТм ржоржирзНрждржмрзНржп ({postComments.length})
                        </button>
                        <button 
                          className="btn btn-sm btn-outline-primary flex-fill"
                          onClick={() => handleShare(post.id)}
                        >
                          ЁЯФД рж╢рзЗржпрж╝рж╛рж░
                        </button>
                      </div>

                      {/* Comments Section */}
                      {activeCommentPost === post.id && (
                        <div className="mt-3">
                          <div className="comment-section">
                            {postComments.map(comment => (
                              <div key={comment.id} className="live-comment p-2 mb-2 rounded">
                                <div className="d-flex justify-content-between align-items-start">
                                  <div>
                                    <strong className="text-success">{comment.userName}</strong>
                                    <p className="mb-0 mt-1">{comment.content}</p>
                                  </div>
                                  <small className="text-muted">{formatCommentTime(comment.timestamp)}</small>
                                </div>
                              </div>
                            ))}
                            {postComments.length === 0 && (
                              <div className="text-center text-muted py-3">
                                ржПржЦржиржУ ржХрзЛржи ржоржирзНрждржмрзНржп ржирзЗржЗред ржкрзНрж░ржержо ржоржирзНрждржмрзНржп ржХрж░рзБржи!
                              </div>
                            )}
                          </div>
                          
                          <div className="mt-2">
                            <div className="input-group">
                              <input 
                                type="text" 
                                className="form-control" 
                                placeholder="ржоржирзНрждржмрзНржп рж▓рж┐ржЦрзБржи..."
                                value={newComment}
                                onChange={(e) => setNewComment(e.target.value)}
                                onKeyPress={(e) => e.key === 'Enter' && handleAddComment(post.id)}
                              />
                              <button 
                                className="btn btn-success" 
                                onClick={() => handleAddComment(post.id)}
                              >
                                ржкрж╛ржарж╛ржи
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Sidebar */}
          <div className="col-lg-4">
            <Sidebar />
          </div>
        </div>
      </div>
    </>
  );
}