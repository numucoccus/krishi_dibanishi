import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";

export default function ProfilePage() {
  const [formData, setFormData] = useState(null);
  const [originalData, setOriginalData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [msg, setMsg] = useState("");
  const [profileImage, setProfileImage] = useState(null);
  const [showPasswordChange, setShowPasswordChange] = useState(false);
  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  });
  const navigate = useNavigate();

  const token = localStorage.getItem("token");

  // Bangla labels mapping
  const fieldLabels = {
    name: "ржкрзВрж░рзНржг ржирж╛ржо",
    email: "ржЗржорзЗржЗрж▓",
    mobile: "ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░", 
    district: "ржЬрзЗрж▓рж╛",
    upazila: "ржЙржкржЬрзЗрж▓рж╛",
    village: "ржЧрзНрж░рж╛ржо/ржкрзНрж░ржХрж▓рзНржк",
    role: "ржнрзВржорж┐ржХрж╛"
  };

  const roleLabels = {
    Farmer: "ржХрзГрж╖ржХ",
    Expert: "ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ",
    Coordinator: "рж╕рзНржерж╛ржирзАрзЯ рж╕ржоржирзНржмрзЯржХрж╛рж░рзА",
    Innovator: "рж╕рзНржЯрж╛рж░рзНржЯржЖржк ржЙржжрзНржпрзЛржХрзНрждрж╛", 
    Supplier: "рж╕рж░ржмрж░рж╛рж╣ржХрж╛рж░рзА",
    Investor: "ржмрж┐ржирж┐рзЯрзЛржЧржХрж╛рж░рзА"
  };

  // Fetch profile on mount
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await fetch("http://localhost:5000/api/profile", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        });

        const data = await res.json();
        console.log("Profile API response:", data);

        if (res.ok) {
          setFormData(data.user);
          setOriginalData(data.user);
          setProfileImage(data.user.profileImage || null);
        } else {
          setMsg(data.message || "ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ");
        }
      } catch (err) {
        console.error(err);
        setMsg("ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржорж╕рзНржпрж╛ред ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [token]);

  // Input change handler
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // Password change handler
  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswordData((prev) => ({ ...prev, [name]: value }));
  };

  // Image change handler
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setProfileImage(file);
  };

  // Cancel changes
  const handleCancel = () => {
    setFormData(originalData);
    setProfileImage(originalData.profileImage || null);
    setMsg("");
    setShowPasswordChange(false);
    setPasswordData({ currentPassword: "", newPassword: "", confirmPassword: "" });
  };

  // Update profile
  const handleUpdate = async (e) => {
    e.preventDefault();
    setMsg("ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...");

    try {
      const form = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        form.append(key, value ?? "");
      });

      if (profileImage && typeof profileImage !== "string") {
        form.append("profileImage", profileImage);
      }

      const res = await fetch("http://localhost:5000/api/profile/update", {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: form,
      });

      const data = await res.json();
      if (res.ok) {
        setMsg("ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ!");
        setOriginalData(formData);
      } else {
        setMsg(data.message || "ржЖржкржбрзЗржЯ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред");
      }
    } catch (err) {
      console.error(err);
      setMsg("ржХрж┐ржЫрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред");
    }
  };

  // Change password
  const handlePasswordUpdate = async (e) => {
    e.preventDefault();
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setMsg("ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржорж┐рж▓ржЫрзЗ ржирж╛");
      return;
    }

    if (passwordData.newPassword.length < 6) {
      setMsg("ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржЕржирзНрждржд рзм ржЕржХрзНрж╖рж░рзЗрж░ рж╣рждрзЗ рж╣ржмрзЗ");
      return;
    }

    setMsg("ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...");

    try {
      const res = await fetch("http://localhost:5000/api/change-password", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          currentPassword: passwordData.currentPassword,
          newPassword: passwordData.newPassword
        }),
      });

      const data = await res.json();
      if (res.ok) {
        setMsg("ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржпрж╝рзЗржЫрзЗ!");
        setShowPasswordChange(false);
        setPasswordData({ currentPassword: "", newPassword: "", confirmPassword: "" });
      } else {
        setMsg(data.message || "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ");
      }
    } catch (err) {
      console.error(err);
      setMsg("ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржорж╕рзНржпрж╛ред ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред");
    }
  };

  // Back button handler
  const handleBack = () => {
    navigate(-1); // Go back to previous page
  };

  if (loading) return <div className="text-center my-5">ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...</div>;
  if (!formData) return <div className="text-center my-5 text-danger">ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред</div>;

  return (
    <div className="container mt-4">
      {/* Back Button */}
      <button className="btn btn-outline-secondary mb-3" onClick={handleBack}>
        тЖР ржкрж┐ржЫржирзЗ ржпрж╛ржи
      </button>

      <div className="card shadow">
        <div className="card-header bg-success text-white">
          <h4 className="mb-0">ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛</h4>
        </div>
        
        <div className="card-body">
          {/* Profile Picture Section */}
          <div className="text-center mb-4 border-bottom pb-4">
            <img
              src={
                typeof profileImage === "string"
                  ? `http://localhost:5000/uploads/${profileImage}`
                  : profileImage
                  ? URL.createObjectURL(profileImage)
                  : "https://via.placeholder.com/150"
              }
              alt="Profile"
              className="img-thumbnail mb-3 shadow"
              style={{ width: "150px", height: "150px", objectFit: "cover", borderRadius: "50%" }}
            />
            <div className="w-50 mx-auto">
              <input
                type="file"
                accept="image/*"
                className="form-control"
                onChange={handleImageChange}
              />
              <small className="text-muted">ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЫржмрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи</small>
            </div>
          </div>

          {/* Password Change Section */}
          <div className="mb-4">
            <button 
              className={`btn ${showPasswordChange ? 'btn-warning' : 'btn-outline-warning'} w-100`}
              onClick={() => setShowPasswordChange(!showPasswordChange)}
            >
              {showPasswordChange ? 'ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржмрж╛рждрж┐рж▓ ржХрж░рзБржи' : 'ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи'}
            </button>
          </div>

          {showPasswordChange && (
            <div className="card border-warning mb-4">
              <div className="card-header bg-warning">
                <h6 className="mb-0">ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи</h6>
              </div>
              <div className="card-body">
                <form onSubmit={handlePasswordUpdate}>
                  <div className="mb-3">
                    <label className="form-label">ржмрж░рзНрждржорж╛ржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб</label>
                    <input
                      type="password"
                      name="currentPassword"
                      value={passwordData.currentPassword}
                      onChange={handlePasswordChange}
                      className="form-control"
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб</label>
                    <input
                      type="password"
                      name="newPassword"
                      value={passwordData.newPassword}
                      onChange={handlePasswordChange}
                      className="form-control"
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи</label>
                    <input
                      type="password"
                      name="confirmPassword"
                      value={passwordData.confirmPassword}
                      onChange={handlePasswordChange}
                      className="form-control"
                      required
                    />
                  </div>
                  <button type="submit" className="btn btn-warning">
                    ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи
                  </button>
                </form>
              </div>
            </div>
          )}

          {/* Profile Information Section */}
          <div className="card border-success">
            <div className="card-header bg-light">
              <h6 className="mb-0">ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп</h6>
            </div>
            <div className="card-body">
              <form onSubmit={handleUpdate}>
                <div className="row">
                  {["name", "email", "mobile", "district", "upazila", "village"].map((field) => (
                    <div className="col-md-6 mb-3" key={field}>
                      <label className="form-label fw-bold">{fieldLabels[field]}</label>
                      <input
                        name={field}
                        value={formData[field] || ""}
                        onChange={handleInputChange}
                        className="form-control"
                        disabled={field === 'email'} // Email shouldn't be changed
                      />
                    </div>
                  ))}
                  
                  {/* Role Display (Read-only) */}
                  <div className="col-md-6 mb-3">
                    <label className="form-label fw-bold">ржнрзВржорж┐ржХрж╛</label>
                    <input
                      value={roleLabels[formData.role] || formData.role}
                      className="form-control"
                      readOnly
                      style={{backgroundColor: '#f8f9fa'}}
                    />
                  </div>
                </div>

                {msg && (
                  <div className={`alert ${msg.includes('рж╕ржлрж▓') ? 'alert-success' : 'alert-info'} mt-3`}>
                    {msg}
                  </div>
                )}

                <div className="d-flex justify-content-between mt-4">
                  <button type="submit" className="btn btn-success px-4">
                    ржкрж░рж┐ржмрж░рзНрждржиржЧрзБрж▓рж┐ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
                  </button>
                  <button type="button" className="btn btn-secondary" onClick={handleCancel}>
                    ржмрж╛рждрж┐рж▓ ржХрж░рзБржи
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}