import React, { useState, useEffect } from "react";
import { useLocation, Link, useNavigate } from "react-router-dom";
import { Container, Row, Col, Card, Button, Tab, Nav, Badge, Form, Modal } from "react-bootstrap";
import './Marketplace_2.css';
import { io } from "socket.io-client";
import AddProducts from "./AddProducts";
import axios from "../../api";

const socket = io("http://localhost:5000", { transports: ["websocket"] });

// ==================== Role Labels ====================
const roleLabels = {
  Farmer: "ржХрзГрж╖ржХ",
  Expert: "ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ",
  Coordinator: "рж╕рзНржерж╛ржирзАрзЯ рж╕ржоржирзНржмрзЯржХрж╛рж░рзА",
  Entrepreneur: "рж╕рзНржЯрж╛рж░рзНржЯржЖржк ржЙржжрзНржпрзЛржХрзНрждрж╛",
  Supplier: "рж╕рж░ржмрж░рж╛рж╣ржХрж╛рж░рзА",
  Investor: "ржмрж┐ржирж┐рзЯрзЛржЧржХрж╛рж░рзА",
};

// ==================== SupplierDashboard Component ====================
const SupplierDashboard = () => {
  const storedUser = JSON.parse(localStorage.getItem("user"));
  const [user] = useState(storedUser || {});
  const [showAdd, setShowAdd] = useState(false);
  const [productsList, setProductsList] = useState([]);
  const [productsState, setProducts] = useState([]);
  const location = useLocation();
  const navigate = useNavigate();

  const handleAddProductClick = () => setShowAdd(true);
  const handleClose = () => setShowAdd(false);

  const handleLogout = () => {
    // Clear user data from localStorage
    localStorage.removeItem("user");
    // Navigate to login page
    navigate('/login', { replace: true });
  };

  // Check if current path is market to apply active styling
  const isMarketActive = location.pathname === '/market';

  const handleProductAdded = (newProduct) => {
    if (newProduct) {
      setProductsList(prev => Array.isArray(prev) ? [newProduct, ...prev] : [newProduct]);
      socket.emit("new-product", newProduct);
    }
  };

  return (
    <>
      {/* Navbar */}
      <nav className="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
        <div className="container">
          <Link className="navbar-brand fw-bold text-success" to="/home">
            BD <span className="text-dark">ржХрзГрж╖рж┐ ржжрж┐ржмрж╛ржирж┐рж╢рж┐</span>
          </Link>
          <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#MarketplaceNavbar">
            <span className="navbar-toggler-icon"></span>
          </button>
          <div className="collapse navbar-collapse justify-content-between" id="MarketplaceNavbar">
            <ul className="navbar-nav mx-auto mb-2 mb-lg-0">
              <li className="nav-item"><Link className="nav-link" to="/home">рж╣рзЛржо</Link></li>
              <li className="nav-item"><Link className="nav-link" to="/dashboard">ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб</Link></li>
              <li className="nav-item"><Link className="nav-link" to="/community">ржХржорж┐ржЙржирж┐ржЯрж┐</Link></li>
              <li className="nav-item"><Link className="nav-link" to="/resources">рж░рж┐рж╕рзЛрж░рзНрж╕</Link></li>
              <li className="nav-item">
                <Link 
                  className={`nav-link ${isMarketActive ? 'active text-success fw-bold' : ''}`} 
                  to="/market" 
                  state={{ supplierView: true }}
                >
                  ржмрж╛ржЬрж╛рж░
                </Link>
              </li>
            </ul>
            <div className="d-flex">
              <button className="btn btn-success me-2">
                {roleLabels[user?.role] || "ржЗржЙржЬрж╛рж░"}
              </button>
              {/* Logout Button */}
              <button 
                className="btn btn-outline-danger" 
                onClick={handleLogout}
              >
                рж▓ржЧржЖржЙржЯ
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="marketplace-section">
        <Container>
          <div className="marketplace-header text-center mb-5">
            <h2 className="fw-bold">ржХрзГрж╖рж┐ ржжрж┐ржмрж╛ржирж┐рж╢рж┐ ржорж╛рж░рзНржХрзЗржЯржкрзНрж▓рзЗрж╕</h2>
            <p className="text-muted">Krishi Dibanishi Marketplace</p>
          </div>

          <Row className="g-4">
            {/* ржкржгрзНржп ржмрж┐ржХрзНрж░рзЯ ржХрж░рзБржи */}
            <Col md={4}>
              <Card className="supplier-card">
                <h5>ЁЯУж ржкржгрзНржп ржмрж┐ржХрзНрж░рзЯ ржХрж░рзБржи</h5>
                <p>ржЖржкржирж╛рж░ рж╕ржХрж▓ рждрж╛рж▓рж┐ржХрж╛ржнрзБржХрзНржд ржкржгрзНржп ржжрзЗржЦрзБржи, ржорзНржпрж╛ржирзЗржЬ ржХрж░рзБржи ржПржмржВ ржирждрзБржи ржкржгрзНржп ржпрзЛржЧ ржХрж░рзБржиред</p>
                <div className="d-flex flex-column gap-2">
                  <Button variant="success" onClick={handleAddProductClick}>тЮХ ржирждрзБржи ржкржгрзНржп ржпрзЛржЧ ржХрж░рзБржи</Button>
                  <AddProducts show={showAdd} handleClose={handleClose} onProductAdded={handleProductAdded} />
                  <div>
                    {productsList.map(p => (
                      <div key={p._id}>{p.title} - {p.price} ржЯрж╛ржХрж╛</div>
                    ))}
                  </div>
                  <Button variant="outline-primary">ЁЯУЛ рж╕ржм ржкржгрзНржп ржжрзЗржЦрзБржи</Button>
                </div>
              </Card>
            </Col>

            {/* ржЕрж░рзНржбрж╛рж░рж╕ржорзВрж╣ */}
            <Col md={4}>
              <Card className="supplier-card">
                <h5>ЁЯЫТ ржЕрж░рзНржбрж╛рж░рж╕ржорзВрж╣</h5>
                <p>ржЖржкржирж╛рж░ рж╕ржХрж▓ ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи ржПржмржВ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ ржХрж░рзБржиред</p>
                <div className="d-flex flex-column gap-2">
                  <Button variant="success">ЁЯУж ржирждрзБржи ржЕрж░рзНржбрж╛рж░ ржжрзЗржЦрзБржи</Button>
                  <Button variant="outline-primary">ЁЯУК ржЕрж░рзНржбрж╛рж░ рж╣рж┐рж╕рзНржЯрзНрж░рж┐</Button>
                </div>
              </Card>
            </Col>

            {/* ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи */}
            <Col md={4}>
              <Card className="supplier-card">
                <h5>ЁЯФФ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи</h5>
                <p>ржирждрзБржи ржЕрж░рзНржбрж╛рж░, ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржорзЗрж╕рзЗржЬ ржПржмржВ рж╕рж┐рж╕рзНржЯрзЗржо ржЖржкржбрзЗржЯ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирзБржиред</p>
                <div className="d-flex flex-column gap-2">
                  <Button variant="success">ЁЯУи ржЗржиржмржХрзНрж╕ ржжрзЗржЦрзБржи</Button>
                  <Button variant="outline-primary">тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕</Button>
                </div>
              </Card>
            </Col>
          </Row>
        </Container>
      </div>
    </>
  );
};

// ==================== Marketplace Data ====================
const categories = [
  { icon: "ЁЯМ╛", title: "ржмрзАржЬ ржУ ржЪрж╛рж░рж╛", subtitle: "Seeds & Seedlings", count: "рзирзйрзк ржкржгрзНржп" },
  { icon: "ЁЯЪЬ", title: "ржпржирзНрждрзНрж░ржкрж╛рждрж┐", subtitle: "Equipment", count: "рззрзорзп ржкржгрзНржп" },
  { icon: "ЁЯРД", title: "ржЦрж╛ржжрзНржп ржУ рж╕рж╛рж░", subtitle: "Feed & Fertilizer", count: "рззрзлрзм ржкржгрзНржп" },
  { icon: "ЁЯТЙ", title: "ржФрж╖ржз ржУ ржнрзНржпрж╛ржХрж╕рж┐ржи", subtitle: "Medicine & Vaccines", count: "рзпрзо ржкржгрзНржп" },
];

const TrendingNow = () => (
  <div className="mt-5">
    <Card className="p-4">
      <h5 className="fw-bold mb-3 text-success">ЁЯУИ ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржЬржиржкрзНрж░рж┐ржпрж╝</h5>
      <p className="text-muted">рж╕ржмржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐ ржЦрзЛржБржЬрж╛ ржкржгрзНржпрж╕ржорзВрж╣</p>
      <ul className="list-unstyled mb-0">
        {[
          "ржмрзНрж░рж┐ ржзрж╛ржирзирзп ржмрзАржЬ",
          "рждрзЗрж▓рж╛ржкрж┐ржпрж╝рж╛ ржкрзЛржирж╛",
          "ржЗржЙрж░рж┐ржпрж╝рж╛ рж╕рж╛рж░",
          "ржкрж╛ржУрзЯрж╛рж░ ржЯрж┐рж▓рж╛рж░",
          "ржЧрж╛ржнрзАрж░ ржЦрж╛ржжрзНржп",
        ].map((item, index) => (
          <li
            key={index}
            className="d-flex justify-content-between align-items-center"
          >
            #{index + 1} {item}
            <span className="text-success">ЁЯУИ</span>
          </li>
        ))}
      </ul>
    </Card>
  </div>
);

const specialOffers = [
  {
    title: "ржорзМрж╕рзБржорзА ржЫрж╛ржбрж╝",
    description: "рж╕ржм ржзрж░ржирзЗрж░ ржмрзАржЬрзЗ рзирзж% ржкрж░рзНржпржирзНржд ржЫрж╛ржбрж╝",
    validity: "ржмрзИржзрждрж╛: рзйрзз ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐ ржкрж░рзНржпржирзНржд",
    code: "WINTER20",
  },
  {
    title: "ржмрж╛рж▓рзНржХ ржЕрж░рзНржбрж╛рж░рзЗрж░ ржЫрж╛ржбрж╝",
    description: "рззрзж,рзжрзжрзж ржЯрж╛ржХрж╛рж░ ржмрзЗрж╢рж┐ ржХрзЗржирж╛ржХрж╛ржЯрж╛ржпрж╝ рззрзл% ржЫрж╛ржбрж╝",
    validity: "ржмрзИржзрждрж╛: рззрзл ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐ ржкрж░рзНржпржирзНржд",
    code: "BULK15",
  },
];

const services = [
  {
    icon: "ЁЯЪЪ",
    title: "рж╣рзЛржо ржбрзЗрж▓рж┐ржнрж╛рж░рж┐",
    desc: "ржЖржкржирж╛рж░ ржжрзЛрж░ржЧрзЛржбрж╝рж╛ржпрж╝ ржкржгрзНржп ржкрзМржБржЫрзЗ ржжрзЗржУржпрж╝рж╛рж░ рж╕рзЗржмрж╛ред ржврж╛ржХрж╛ рж╢рж╣рж░рзЗ рзирзк ржШржгрзНржЯрж╛ржпрж╝, рж╕рж╛рж░рж╛ржжрзЗрж╢рзЗ рзй-рзл ржжрж┐ржирзЗред",
    price: "рзлрзж ржЯрж╛ржХрж╛ ржерзЗржХрзЗ рж╢рзБрж░рзБ",
    btnText: "ржЕрж░рзНржбрж╛рж░ ржХрж░рзБржи",
    btnDisabled: false,
  },
  {
    icon: "ЁЯСитАНтЪХя╕П",
    title: "ржкрж╢рзБ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рзЗржмрж╛",
    desc: "ржЕржнрж┐ржЬрзНржЮ ржнрзЗржЯрзЗрж░рж┐ржирж╛рж░рж┐ ржбрж╛ржХрзНрждрж╛рж░ржжрзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржкрж╢рзБ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рзЗржмрж╛ред ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ рзирзк/рзн рж╕рзЗржмрж╛ред",
    price: "рзлрзжрзж ржЯрж╛ржХрж╛ ржерзЗржХрзЗ рж╢рзБрж░рзБ",
    btnText: "ржбрж╛ржХрзНрждрж╛рж░ ржбрж╛ржХрзБржи",
    btnDisabled: false,
  },
  {
    icon: "ЁЯФз",
    title: "ржпржирзНрждрзНрж░ржкрж╛рждрж┐ ржорзЗрж░рж╛ржоржд",
    desc: "ржХрзГрж╖рж┐ ржпржирзНрждрзНрж░ржкрж╛рждрж┐ ржорзЗрж░рж╛ржоржд ржУ рж░ржХрзНрж╖ржгрж╛ржмрзЗржХрзНрж╖ржг рж╕рзЗржмрж╛ред ржжржХрзНрж╖ ржЯрзЗржХржирж┐рж╢рж┐ржпрж╝рж╛ржи ржУ ржЖрж╕рж▓ ржпржирзНрждрзНрж░рж╛ржВрж╢ред",
    price: "рж╕рзЗржо ржбрзЗ рж╕рж╛рж░рзНржнрж┐рж╕",
    btnText: "рж╕рзЗржмрж╛ ржирж┐ржи",
    btnDisabled: false,
  },
];

const Marketplace = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [supplierView, setSupplierView] = useState(false);
  const [productsState, setProducts] = useState([]);
  const [activeTab, setActiveTab] = useState("products");
  const [visibleProducts, setVisibleProducts] = useState(6);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const handleClose = () => setSelectedProduct(null);

  const handleLogout = () => {
    // Clear user data from localStorage
    localStorage.removeItem("user");
    // Navigate to login page
    navigate('/login');
  };

  // Check if current path is market to apply active styling
  const isMarketActive = location.pathname === '/market';

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const res = await axios.get("/products");
        setProducts(Array.isArray(res.data.products) ? res.data.products : []);
      } catch (err) {
        console.error(err);
      }
    };
    fetchProducts();
  }, []);

  // тЬЕ Socket.io new-product 
  useEffect(() => {
    socket.on("new-product", (product) => {
      if (product) {
        setProducts(prev => Array.isArray(prev) ? [product, ...prev] : [product]);
      }
    });
    return () => socket.off("new-product");
  }, []);

  // тЬЕ Supplier view check
  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("user"));
    if (location.state?.supplierView) {
      setSupplierView(true);
    } else if (user?.role?.toLowerCase() === "supplier") {
      setSupplierView(true);
    } else {
      setSupplierView(false);
    }
  }, [location.state]);

  // тЬЕ Infinite scroll
  useEffect(() => {
    const onScroll = () => {
      if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 300) {
        setVisibleProducts(prev => Math.min(prev + 1, productsState.length));
      }
    };
    window.addEventListener("scroll", onScroll);
    return () => window.removeEventListener("scroll", onScroll);
  }, [productsState]);

  if (supplierView) return <SupplierDashboard />;

  // ==================== Normal Marketplace UI ====================
  const storedUser = JSON.parse(localStorage.getItem("user"));

  return (
    <>
      {/* Navbar */}
      <nav className="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
        <div className="container">
          <Link className="navbar-brand fw-bold text-success" to="/home">
            BD <span className="text-dark">ржХрзГрж╖рж┐ ржжрж┐ржмрж╛ржирж┐рж╢рж┐</span>
          </Link>
          <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#MarketplaceNavbar">
            <span className="navbar-toggler-icon"></span>
          </button>
          <div className="collapse navbar-collapse justify-content-between" id="MarketplaceNavbar">
            <ul className="navbar-nav mx-auto mb-2 mb-lg-0">
              <li className="nav-item"><Link className="nav-link" to="/home">рж╣рзЛржо</Link></li>
              <li className="nav-item"><Link className="nav-link" to="/dashboard">ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб</Link></li>
              <li className="nav-item"><Link className="nav-link" to="/community">ржХржорж┐ржЙржирж┐ржЯрж┐</Link></li>
              <li className="nav-item"><Link className="nav-link" to="/resources">рж░рж┐рж╕рзЛрж░рзНрж╕</Link></li>
              <li className="nav-item">
                <Link 
                  className={`nav-link ${isMarketActive ? 'active text-success fw-bold' : ''}`} 
                  to="/market"
                >
                  ржмрж╛ржЬрж╛рж░
                </Link>
              </li>
            </ul>
            <div className="d-flex">
              <button className="btn btn-success me-2">
                {roleLabels[storedUser?.role] || "ржЗржЙржЬрж╛рж░"}
              </button>
              {/* Logout Button */}
              <button 
                className="btn btn-outline-danger" 
                onClick={handleLogout}
              >
                рж▓ржЧржЖржЙржЯ
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Marketplace Section */}
      <div className="marketplace-section">
        <Container>
          <div className="marketplace-header text-center mb-5">
            <h2 className="fw-bold">ржХрзГрж╖рж┐ ржжрж┐ржмрж╛ржирж┐рж╢рж┐ ржорж╛рж░рзНржХрзЗржЯржкрзНрж▓рзЗрж╕</h2>
            <p className="text-muted">Krishi Dibanishi Marketplace</p>
            <p className="text-muted fs-6 mx-auto" style={{ maxWidth: "600px" }}>
              ржХрзГрж╖рж┐, ржорзОрж╕рзНржп ржУ ржкрзНрж░рж╛ржгрж┐рж╕ржорзНржкржжрзЗрж░ ржЬржирзНржп ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╕ржХрж▓ ржкржгрзНржп ржУ рж╕рзЗржмрж╛ ржПржХ
              ржЬрж╛ржпрж╝ржЧрж╛ржпрж╝ред ржмрж┐рж╢рзНржмрж╕рзНржд ржмрж┐ржХрзНрж░рзЗрждрж╛ ржУ рж╕рж╛рж╢рзНрж░ржпрж╝рзА ржорзВрж▓рзНржпред
            </p>
          </div>

          <Row className="mb-4 justify-content-center align-items-center">
            <Col md={6}>
              <Form.Control
                type="text"
                placeholder="ржкржгрзНржп, ржмрзАржЬ, ржпржирзНрждрзНрж░ржкрж╛рждрж┐ ржмрж╛ рж╕рзЗржмрж╛ ржЦрзБржБржЬрзБржи..."
                className="search-input"
              />
            </Col>
            <Col md="auto" className="d-flex gap-2">
              <Button variant="outline-secondary" className="btn-filter">
                ржлрж┐рж▓рзНржЯрж╛рж░
              </Button>
              <Button variant="outline-secondary" className="btn-location">
                ржПрж▓рж╛ржХрж╛
              </Button>
            </Col>
          </Row>

          <Row className="g-4 text-center mb-5">
            {categories.map(({ icon, title, subtitle, count }, idx) => (
              <Col md={3} key={idx}>
                <Card className="category-card">
                  <div className="icon">{icon}</div>
                  <h5>{title}</h5>
                  <p>{subtitle}</p>
                  <Badge bg="light" text="muted" className="count-badge">
                    {count}
                  </Badge>
                </Card>
              </Col>
            ))}
          </Row>

          <h4 className="mb-3 fw-bold">ржмрж┐рж╢рзЗрж╖ ржЕржлрж╛рж░</h4>
          <Row className="mb-4">
            {specialOffers.map(({ title, description, validity, code }, idx) => (
              <Col md={6} key={idx}>
                <Card className="special-offer-card p-3">
                  <h5>{title}</h5>
                  <p>{description}</p>
                  <small className="text-muted">
                    {validity} | ржХрзЛржб: <code>{code}</code>
                  </small>
                  <Button variant="warning" size="sm" className="btn-offer mt-3">
                    ржЕржлрж╛рж░ ржкрж╛ржи
                  </Button>
                </Card>
              </Col>
            ))}
          </Row>

          {/* Products & Services */}
          <Tab.Container activeKey={activeTab} onSelect={setActiveTab}>
            <Nav variant="tabs" className="marketplace-tabs mb-4 justify-content-center">
              <Nav.Item><Nav.Link eventKey="products">ржкржгрзНржпрж╕ржорзВрж╣</Nav.Link></Nav.Item>
              <Nav.Item><Nav.Link eventKey="services">рж╕рзЗржмрж╛рж╕ржорзВрж╣</Nav.Link></Nav.Item>
            </Nav>
            <Tab.Content>
              <Tab.Pane eventKey="products">
                <Row className="g-3">
                  {productsState.slice(0, visibleProducts).map((p, idx) => (
                    <Col md={4} key={idx}>
                      <Card
                        className="product-card p-3 hover-card"
                        onClick={() => setSelectedProduct(p)}
                      >
                        <h5>{p.title}</h5>
                        <p>{p.price} ржЯрж╛ржХрж╛</p>
                        <small>{p.unit}</small>
                      </Card>
                    </Col>
                  ))}
                </Row>

                {/* Product Detail Modal */}
                {selectedProduct && (
                  <Modal show={true} onHide={handleClose} centered>
                    <Modal.Header closeButton>
                      <Modal.Title>{selectedProduct.title}</Modal.Title>
                    </Modal.Header>
                    <Modal.Body>
                      <p><strong>ржорзВрж▓рзНржп:</strong> {selectedProduct.price} ржЯрж╛ржХрж╛</p>
                      <p><strong>ржПржХржХ:</strong> {selectedProduct.unit}</p>
                      <p><strong>ржмрж┐ржмрж░ржг:</strong> {selectedProduct.desc || "ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржирзЗржЗред"}</p>

                      {/* Supplier Information */}
                      {selectedProduct.supplier && (
                        <>
                          <hr />
                          <h6>рж╕рж░ржмрж░рж╛рж╣ржХрж╛рж░рзА рждржерзНржп</h6>
                          <p><strong>Username:</strong> {selectedProduct.supplier.username}</p>
                          <p><strong>ржлрзЛржи:</strong> {selectedProduct.supplier.phone}</p>
                          <p><strong>ржЕржмрж╕рзНржерж╛ржи:</strong> {selectedProduct.supplier.location}</p>
                        </>
                      )}
                    </Modal.Body>
                    <Modal.Footer className="d-flex justify-content-between">
                      <Button variant="secondary" onClick={handleClose}>
                        ржмржирзНржз ржХрж░рзБржи
                      </Button>
                      <Button variant="success">
                        ЁЯЫТ ржХрж┐ржирзБржи
                      </Button>
                    </Modal.Footer>
                  </Modal>
                )}
              </Tab.Pane>

              <Tab.Pane eventKey="services">
                <div className="mt-5"></div>
                <h4 className="services-heading">ржЙржкрж▓ржмрзНржз рж╕рзЗржмрж╛рж╕ржорзВрж╣</h4>
                <div className="services-grid">
                  {services.map((service, index) => (
                    <div 
                      key={index} 
                      className={`service-card ${index < 3 ? 'pani-bg' : ''}`}
                    >
                      <div className="icon">{service.icon}</div>
                      <h5>{service.title}</h5>
                      <p>{service.desc}</p>
                      <div className="service-price">{service.price}</div>
                      <Button 
                        variant="success" 
                        size="sm" 
                        disabled={service.btnDisabled}
                      >
                        {service.btnText}
                      </Button>
                    </div>
                  ))}
                </div>
              </Tab.Pane>
            </Tab.Content>
          </Tab.Container>

          <TrendingNow />
        </Container>
      </div>
    </>
  );
};

export default Marketplace;